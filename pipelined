#!/usr/bin/env python3
#
# This file is part of the Robotic Observatory Control Kit (rockit)
#
# rockit is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# rockit is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with rockit.  If not, see <http://www.gnu.org/licenses/>.

"""Frame pipeline daemon"""

# pylint: disable=too-many-branches


import argparse
import datetime
import threading
import Pyro4
from rockit.common import daemons, log, TryLock
from rockit.common.helpers import pyro_client_matches
from rockit.pipeline import CommandStatus, Config


class PipelineDaemon:
    """Master daemon for data pipeline"""
    def __init__(self, config):
        self._config = config
        self._command_lock = threading.Lock()

        self._wcs_enabled = False
        self._rotation_enabled = False
        self._hfd_enabled = False
        self._hfd_grid_enabled = False
        self._intensity_stats_enabled = False
        self._dashboard_enabled = True

        self._guide_camera_id = None
        self._custom_headers = []

        # Information for building the output filename
        self._output_subdirectory = '.'
        self._output_frame_prefix = 'unknown'

        self._frame_object = ''
        self._frame_type = 'JUNK'

        self._worker_daemons = {}
        self._output_save_to_disk = {}
        for camera_id in config.cameras:
            self._output_save_to_disk[camera_id] = False
            self._worker_daemons[camera_id] = getattr(daemons, config.cameras[camera_id]['worker_daemon'])

    def __set_output_subdirectory(self, name):
        """Attempts to set the output data subdirectory inside the config.data_root_path
           If path is 'default' a YYYYMMDD night directory will be created, otherwise
           the given directory name will be created and/or checked to ensure it is writable.
           Returns a CommandStatus indicating the result
        """
        if name == 'default':
            # Default to a night directory in the base data dir
            # Directory will be created if required
            night = (datetime.datetime.utcnow() - datetime.timedelta(hours=12))
            name = night.strftime('%Y%m%d')

        self._output_subdirectory = name

        for camera_id in self._config.cameras:
            try:
                with self._worker_daemons[camera_id].connect() as worker:
                    status = worker.create_output_subdirectory(name)
                    if status != CommandStatus.Succeeded:
                        return status
            except Exception:
                print('Failed to notify ' + camera_id + ' worker with output directory')
        return CommandStatus.Succeeded

    @Pyro4.expose
    def notify_frame(self, camera_id, filename):
        """Called by the camera daemons to notify that a new frame has been saved to disk
           filename is specified relative to the incoming_data_path config value."""

        if camera_id not in self._config.cameras:
            raise Exception('Unknown camera id ' + camera_id)

        info = {
            'camera_id': camera_id,
            'filename': filename,
            'guide_profiles': self._guide_camera_id == camera_id,
            'custom_headers': self._custom_headers,
            'wcs_enabled': self._wcs_enabled,
            'rotation_enabled': self._rotation_enabled,
            'hfd_enabled': self._hfd_enabled,
            'hfd_grid_enabled': self._hfd_grid_enabled,
            'intensity_stats_enabled': self._intensity_stats_enabled,
            'dashboard_enabled': self._dashboard_enabled,

            'frame_type': self._frame_type,
            'frame_object': self._frame_object,

            'output_subdirectory': self._output_subdirectory,
            'output_prefix': self._output_frame_prefix,
            'output_archive': self._output_save_to_disk[camera_id]
        }

        with self._worker_daemons[camera_id].connect() as worker:
            worker.notify_frame(info)

    @Pyro4.expose
    def set_archive_subdirectory(self, name):
        """Sets the output frame subdirectory"""
        if not pyro_client_matches(self._config.control_ips):
            return CommandStatus.InvalidControlIP

        with TryLock(self._command_lock) as success:
            if not success:
                return CommandStatus.Blocked

            directory_status = self.__set_output_subdirectory(name)
            if directory_status != CommandStatus.Succeeded:
                return directory_status

            log.info(self._config.log_name, 'Frame archive subdirectory set to ' + str(name))
            return CommandStatus.Succeeded

    @Pyro4.expose
    def set_output_frame_prefix(self, prefix):
        """Sets the output frame prefix"""
        if not pyro_client_matches(self._config.control_ips):
            return CommandStatus.InvalidControlIP

        with TryLock(self._command_lock) as success:
            if not success:
                return CommandStatus.Blocked

            self._output_frame_prefix = prefix

            log.info(self._config.log_name, 'Frame prefix set to ' + prefix)
            return CommandStatus.Succeeded

    @Pyro4.expose
    def set_archive(self, camera_id, enabled):
        """Enable or disable archiving to disk"""
        if not pyro_client_matches(self._config.control_ips):
            return CommandStatus.InvalidControlIP

        with TryLock(self._command_lock) as success:
            if not success:
                return CommandStatus.Blocked

            if camera_id not in self._config.cameras:
                return CommandStatus.UnknownCameraID

            self._output_save_to_disk[camera_id] = enabled
            log.info(self._config.log_name, 'Frame archiving for ' + camera_id +
                     (' enabled' if enabled else ' disabled'))
            return CommandStatus.Succeeded

    @Pyro4.expose
    def register_preview(self, camera_id, user, port):
        """Register a ds9 window for previews"""
        if not pyro_client_matches(self._config.control_ips):
            return CommandStatus.InvalidControlIP

        host = Pyro4.current_context.client.sock.getpeername()[0]
        with self._worker_daemons[camera_id].connect() as worker:
            return worker.register_preview(user, host, port)

    @Pyro4.expose
    def set_frame_object(self, object_name):
        """Sets the output frame number"""
        if not pyro_client_matches(self._config.control_ips):
            return CommandStatus.InvalidControlIP

        with TryLock(self._command_lock) as success:
            if not success:
                return CommandStatus.Blocked

            self._frame_object = object_name

            log.info(self._config.log_name, 'Frame object set to ' + object_name)
            return CommandStatus.Succeeded

    @Pyro4.expose
    def set_frame_type(self, frame_type):
        """Sets the output frame number"""
        if not pyro_client_matches(self._config.control_ips):
            return CommandStatus.InvalidControlIP

        with TryLock(self._command_lock) as success:
            if not success:
                return CommandStatus.Blocked

            self._frame_type = frame_type

            log.info(self._config.log_name, 'Frame type set to ' + frame_type)
            return CommandStatus.Succeeded

    @Pyro4.expose
    def set_wcs(self, enabled):
        """Enable or disable wcs solutions"""
        if not pyro_client_matches(self._config.control_ips):
            return CommandStatus.InvalidControlIP

        with TryLock(self._command_lock) as success:
            if not success:
                return CommandStatus.Blocked

            self._wcs_enabled = enabled
            log.info(self._config.log_name, 'WCS solution ' + ('enabled' if enabled else 'disabled'))
            return CommandStatus.Succeeded

    @Pyro4.expose
    def set_rotation(self, enabled):
        """Enable or disable field rotation calculation"""
        if not pyro_client_matches(self._config.control_ips):
            return CommandStatus.InvalidControlIP

        with TryLock(self._command_lock) as success:
            if not success:
                return CommandStatus.Blocked

            self._rotation_enabled = enabled
            log.info(self._config.log_name, 'Field rotation calculation ' + ('enabled' if enabled else 'disabled'))
            return CommandStatus.Succeeded

    @Pyro4.expose
    def set_hfd(self, enabled):
        """Enable or disable half-flux diameter calculations"""
        if not pyro_client_matches(self._config.control_ips):
            return CommandStatus.InvalidControlIP

        with TryLock(self._command_lock) as success:
            if not success:
                return CommandStatus.Blocked

            self._hfd_enabled = enabled
            log.info(self._config.log_name, 'HFD calculation ' + ('enabled' if enabled else 'disabled'))
            return CommandStatus.Succeeded

    @Pyro4.expose
    def set_hfd_grid(self, enabled):
        """Enable or disable half-flux diameter grid calculations"""
        if not pyro_client_matches(self._config.control_ips):
            return CommandStatus.InvalidControlIP

        with TryLock(self._command_lock) as success:
            if not success:
                return CommandStatus.Blocked

            self._hfd_grid_enabled = enabled
            log.info(self._config.log_name, 'HFD grid calculation ' + ('enabled' if enabled else 'disabled'))
            return CommandStatus.Succeeded

    @Pyro4.expose
    def set_intensity_stats(self, enabled):
        """Enable or disable intensity statistics solutions"""
        if not pyro_client_matches(self._config.control_ips):
            return CommandStatus.InvalidControlIP

        with TryLock(self._command_lock) as success:
            if not success:
                return CommandStatus.Blocked

            self._intensity_stats_enabled = enabled
            log.info(self._config.log_name, 'Intensity statistics ' + ('enabled' if enabled else 'disabled'))
            return CommandStatus.Succeeded

    @Pyro4.expose
    def set_dashboard(self, enabled):
        """Enable or disable dashboard updates"""
        if not pyro_client_matches(self._config.control_ips):
            return CommandStatus.InvalidControlIP

        with TryLock(self._command_lock) as success:
            if not success:
                return CommandStatus.Blocked

            self._dashboard_enabled = enabled
            log.info(self._config.log_name, 'Dashboard updates ' + ('enabled' if enabled else 'disabled'))
            return CommandStatus.Succeeded

    @Pyro4.expose
    def configure(self, params, quiet=False):
        """Set pipeline configuration to the requested state
           params should be a dictionary with the following keys:
              subdirectory: Data subdirectory where images should be saved
              prefix: Filename prefix for each image
              type: Science/Calibration/Junk/etc
              object: Object name to include for Science frames
              archive: Array of instrument arm names for which to enable image archiving
              wcs: Attempt to solve WCS coordinates (True/False)
              intstats: Calculate basic intensity statistics (True/False)
              hfd: Calculate median half-flux diameters from objects in the image (True/False)
              guide: Calculate guide profiles for the given camera
              headers: Array of keyword/value/comment entries to append to the frame header
           Any properties not specified in params will be reset to its default
        """
        if not pyro_client_matches(self._config.control_ips):
            return CommandStatus.InvalidControlIP

        with TryLock(self._command_lock) as success:
            if not success:
                return CommandStatus.Blocked

            directory_status = self.__set_output_subdirectory(params.get('subdirectory', 'default'))
            if directory_status != CommandStatus.Succeeded:
                return directory_status

            if not quiet:
                log.info(self._config.log_name, 'Frame archive subdirectory set to ' + str(self._output_subdirectory))

            self._output_frame_prefix = params.get('prefix', 'unknown')
            if not quiet:
                log.info(self._config.log_name, 'Frame prefix set to ' + self._output_frame_prefix)

            self._frame_type = params.get('type', 'JUNK')
            if not quiet:
                log.info(self._config.log_name, 'Frame type set to ' + self._frame_type)

            self._frame_object = params.get('object', '')
            if not quiet:
                log.info(self._config.log_name, 'Frame object set to ' + self._frame_object)

            archive = params.get('archive', [])
            for camera_id in self._config.cameras:
                self._output_save_to_disk[camera_id] = camera_id in archive
                if not quiet:
                    log.info(self._config.log_name, f'Frame archiving for {camera_id} enabled')

            self._wcs_enabled = params.get('wcs', False)
            if not quiet:
                log.info(self._config.log_name, 'WCS solution ' +
                         ('enabled' if self._wcs_enabled else 'disabled'))

            self._intensity_stats_enabled = params.get('intstats', False)
            if not quiet:
                log.info(self._config.log_name, 'Intensity statistics ' +
                         ('enabled' if self._intensity_stats_enabled else 'disabled'))

            self._hfd_enabled = params.get('hfd', False)
            if not quiet:
                log.info(self._config.log_name, 'HFD calculation ' +
                         ('enabled' if self._hfd_enabled else 'disabled'))

            self._guide_camera_id = params.get('guide', None)
            if not quiet:
                log.info(self._config.log_name, 'Guide profiles ' +
                         ('on ' + self._guide_camera_id if self._guide_camera_id else 'disabled'))

            self._custom_headers = params.get('headers', [])
            if not quiet:
                log.info(self._config.log_name, f'Defined {len(self._custom_headers)} custom header(s)')

            return CommandStatus.Succeeded

    @Pyro4.expose
    def report_status(self):
        """Returns a dictionary containing the current pipeline state"""
        return {
            'guide_camera_id': self._guide_camera_id,

            'wcs_enabled': self._wcs_enabled,
            'rotation_enabled': self._rotation_enabled,
            'hfd_enabled': self._hfd_enabled,
            'hfd_grid_enabled': self._hfd_grid_enabled,
            'intensity_stats_enabled': self._intensity_stats_enabled,
            'dashboard_enabled': self._dashboard_enabled,

            'archive_enabled': self._output_save_to_disk,
            'archive_subdirectory': str(self._output_subdirectory),

            'frame_type': self._frame_type,
            'frame_object': self._frame_object,
            'frame_prefix': self._output_frame_prefix
        }


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Data pipeline daemon')
    parser.add_argument('config', help='Path to configuration json file')
    args = parser.parse_args()
    c = Config(args.config)
    c.daemon.launch(PipelineDaemon(c))
