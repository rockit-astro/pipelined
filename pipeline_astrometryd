#!/usr/bin/env python3
#
# This file is part of the Robotic Observatory Control Kit (rockit)
#
# rockit is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# rockit is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with rockit.  If not, see <http://www.gnu.org/licenses/>.

"""Frame astrometry daemon"""


import argparse
import base64
import os
import subprocess
import Pyro4
from rockit.common import daemons


class PipelineAstrometryDaemon:
    @Pyro4.expose
    def solve(self, args):
        table_path = '/var/tmp/' + args['camera_id'] + '-' + str(args['exposure_count']) + '-scratch.xyls'
        try:
            os.remove(table_path)
        except OSError:
            pass

        with open(table_path, 'wb') as f:
            f.write(base64.b64decode(args['data']))

        wcs_path = '/var/tmp/' + args['camera_id'] + '-' + str(args['exposure_count']) + '-scratch.wcs'
        try:
            os.remove(wcs_path)
        except OSError:
            pass

        wcs_args = [
            '/usr/bin/solve-field',
            '--overwrite', '--no-plots',
            '--axy', 'none', '--rdls', 'none', '--match', 'none',
            '--corr', 'none', '--solved', 'none',
            '--scale-units', 'arcsecperpix', '--scale-high', str(args['scale_high']),
            '--scale-low', str(args['scale_low']), '--width', str(args['width']), '--height', str(args['height'])]

        if 'ra' in args and 'dec' in args and 'radius' in args:
            wcs_args.extend([
                '--ra', str(args['ra']),
                '--dec', str(args['dec']),
                '--radius', str(args['radius'])
            ])

        wcs_args.append(table_path)

        subprocess.check_call(wcs_args, timeout=args['timeout'],
                              stdout=subprocess.DEVNULL,
                              stderr=subprocess.DEVNULL)

        with open(wcs_path, encoding='ascii') as wcs_file:
            h = wcs_file.read()
            return [h[i:i + 80] for i in range(0, len(h), 80)]


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Data pipeline worker daemon')
    parser.add_argument('daemon_name', help='Daemon name')
    getattr(daemons, parser.parse_args().daemon_name).launch(PipelineAstrometryDaemon())
