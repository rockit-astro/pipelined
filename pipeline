#!/usr/bin/env python3
#
# This file is part of the Robotic Observatory Control Kit (rockit)
#
# rockit is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# rockit is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with rockit.  If not, see <http://www.gnu.org/licenses/>.

"""Commandline client for managing the reduction pipeline"""

# pylint: disable=invalid-name
# pylint: disable=broad-except

import glob
import os
import random
import sys
import traceback
import Pyro4
from rockit.common import TFmt
from rockit.pipeline import CommandStatus, Config

SCRIPT_NAME = os.path.basename(sys.argv[0])
sys.excepthook = Pyro4.util.excepthook

# Mapping used for the 'type' command
TYPE_VALUES = {
    'bias': 'BIAS',
    'dark': 'DARK',
    'flat': 'FLAT',
    'science': 'SCIENCE',
    'junk': 'JUNK'
}


def run_command(command, args):
    """Runs a daemon command, handling error messages"""
    if 'PIPELINED_CONFIG_PATH' in os.environ:
        config = Config(os.environ['PIPELINED_CONFIG_PATH'])
    else:
        # Load the config file defined in the PIPELINED_CONFIG_PATH environment variable or from the
        # default system location (/etc/pipelined/). Exit with an error if zero or multiple are found.
        files = glob.glob("/etc/pipelined/*.json")
        if len(files) != 1:
            print('error: failed to guess the default config file. ' +
                  'Run as PIPELINED_CONFIG_PATH=/path/to/config.json pipeline <command>')
            return 1

        config = Config(files[0])

    try:
        ret = command(config, args)
    except Pyro4.errors.CommunicationError:
        ret = -101

    # Print message associated with error codes, except for -1 (error handled locally)
    if ret not in [-1, 0]:
        print(CommandStatus.message(ret))
    sys.exit(ret)


def camera_ids(config):
    """Returns a dictionary of lowercase camera id to camera id"""
    return {camera_id.lower(): camera_id for camera_id in config.cameras}


def list_cameras(config, _):
    print(' '.join(camera_ids(config)))
    return 0


def print_status(config, _):
    """Reports the current pipeline status"""
    with config.daemon.connect() as pipeline:
        data = pipeline.report_status()

    print('Frame Archiving:')
    print('   Archive subdirectory is ' + TFmt.Bold + data['archive_subdirectory'] + TFmt.Clear)
    print('   Frame prefix is ' + TFmt.Bold + data['frame_prefix'] + TFmt.Clear)
    print('   Frame type is ' + TFmt.Bold + data['frame_type'] + TFmt.Clear)
    if data['frame_type'] == 'SCIENCE':
        print('   Frame object is ' + TFmt.Bold + data['frame_object'] + TFmt.Clear)
    else:
        print('   Frame object not written (requires SCIENCE type)')

    for camera_id, enabled in data['archive_enabled'].items():
        label = TFmt.Green + 'ARCHIVED' if enabled else TFmt.Red + 'DISCARDED'
        print('   ' + camera_id + ' camera frames are ' + TFmt.Bold + label + TFmt.Clear)

    print('Pipeline flags:')
    wcs = TFmt.Green + 'ENABLED' if data['wcs_enabled'] else TFmt.Red + 'DISABLED'
    print('   WCS solutions are ' + TFmt.Bold + wcs + TFmt.Clear)

    rotation = TFmt.Green + 'ENABLED' if data['rotation_enabled'] else TFmt.Red + 'DISABLED'
    print('   Field rotation calculation is ' + TFmt.Bold + rotation + TFmt.Clear)

    hfd = TFmt.Green + 'ENABLED' if data['hfd_enabled'] else TFmt.Red + 'DISABLED'
    print('   HFD calculation is ' + TFmt.Bold + hfd + TFmt.Clear)

    hfd_grid = TFmt.Green + 'ENABLED' if data['hfd_grid_enabled'] else TFmt.Red + 'DISABLED'
    print('   HFD grid calculation is ' + TFmt.Bold + hfd_grid + TFmt.Clear)

    intstats = TFmt.Green + 'ENABLED' if data['intensity_stats_enabled'] else TFmt.Red + 'DISABLED'
    print('   Intensity statistics are ' + TFmt.Bold + intstats + TFmt.Clear)

    guideprofiles = TFmt.Red + 'DISABLED'
    if data['guide_camera_id']:
        guideprofiles = TFmt.Green + 'ENABLED' + TFmt.Clear + TFmt.Bold + ' (' + data['guide_camera_id'] + ')'
    print('   Guide profiles are ' + TFmt.Bold + guideprofiles + TFmt.Clear)

    dash = TFmt.Green + 'ENABLED' if data['dashboard_enabled'] else TFmt.Red + 'DISABLED'
    print('   Dashboard updates are ' + TFmt.Bold + dash + TFmt.Clear)
    return 0


def dashboard(config, args):
    """Configure dashboard preview generation"""
    if len(args) == 1 and (args[0] == 'enable' or args[0] == 'disable'):
        with config.daemon.connect() as pipeline:
            return pipeline.set_dashboard(args[0] == 'enable')

    print(f'usage: {SCRIPT_NAME} dashboard [enable|disable]')
    return -1


def set_archive_subdirectory(config, args):
    """Set the frame archive subdirectory"""
    if len(args) == 1:
        with config.daemon.connect() as pipeline:
            return pipeline.set_archive_subdirectory(args[0])
    print(f'usage: {SCRIPT_NAME} subdir <subdirectory name>')
    return -1


def set_prefix(config, args):
    """Set the output frame filename prefix"""
    if len(args) == 1:
        with config.daemon.connect() as pipeline:
            return pipeline.set_output_frame_prefix(args[0])
    print(f'usage: {SCRIPT_NAME} prefix <output frame prefix>')
    return -1


def set_object(config, args):
    """Set the OBJECT header keyword"""
    if len(args) == 1:
        with config.daemon.connect() as pipeline:
            return pipeline.set_frame_object(args[0])
    print(f'usage: {SCRIPT_NAME} object <object name>')
    return -1


def set_type(config, args):
    """Set the IMAGETYP header keyword"""
    if len(args) == 1 and args[0] in TYPE_VALUES:
        with config.daemon.connect() as pipeline:
            return pipeline.set_frame_type(TYPE_VALUES[args[0]])
    print(f'usage: {SCRIPT_NAME} type (bias|dark|flat|science|junk)')
    return -1


def set_archive(config, args):
    """Enable or disable archiving of acquired frames to disk"""
    cameras = camera_ids(config)
    if len(args) == 2 and args[0] in cameras and (args[1] == 'enable' or args[1] == 'disable'):
        with config.daemon.connect() as pipeline:
            return pipeline.set_archive(cameras[args[0]], args[1] == 'enable')

    print(f"usage: {SCRIPT_NAME} save ({'|'.join(cameras)}) (enable|disable)")
    return -1


def set_wcs(config, args):
    """Enable or disable wcs solutions for acquired frames"""
    if len(args) == 1 and (args[0] == 'enable' or args[0] == 'disable'):
        with config.daemon.connect() as pipeline:
            return pipeline.set_wcs(args[0] == 'enable')

    print(f'usage: {SCRIPT_NAME} wcs (enable|disable)')
    return -1


def set_rotation(config, args):
    """Enable or disable field rotation calculation for acquired frames"""
    if len(args) == 1 and (args[0] == 'enable' or args[0] == 'disable'):
        with config.daemon.connect() as pipeline:
            return pipeline.set_rotation(args[0] == 'enable')

    print(f'usage: {SCRIPT_NAME} rotation (enable|disable)')
    return -1


def set_hfd(config, args):
    """Enable or disable half-flux diameter calculation for acquired frames"""
    if len(args) == 1 and (args[0] == 'enable' or args[0] == 'disable'):
        with config.daemon.connect() as pipeline:
            return pipeline.set_hfd(args[0] == 'enable')

    print(f'usage: {SCRIPT_NAME} hfd (enable|disable)')
    return -1


def set_hfd_grid(config, args):
    """Enable or disable half-flux diameter grid calculation for acquired frames"""
    if len(args) == 1 and (args[0] == 'enable' or args[0] == 'disable'):
        with config.daemon.connect() as pipeline:
            return pipeline.set_hfd_grid(args[0] == 'enable')

    print(f'usage: {SCRIPT_NAME} hfdgrid (enable|disable)')
    return -1


def set_intensity_stats(config, args):
    """Enable or disable intensity statistics for acquired frames"""
    if len(args) == 1 and (args[0] == 'enable' or args[0] == 'disable'):
        with config.daemon.connect() as pipeline:
            return pipeline.set_intensity_stats(args[0] == 'enable')

    print(f'usage: {SCRIPT_NAME} intstats (enable|disable)')
    return -1


def register_preview(config, args):
    """Open a new ds9 preview window and register it with the server"""
    cameras = camera_ids(config)
    if len(args) != 1 or args[0] not in cameras:
        print(f"usage: {SCRIPT_NAME} preview ({'|'.join(cameras)})")
        return -1

    camera_id = cameras[args[0]]

    try:
        # This import may stall if there are issues with the network.
        # Import this only when we need it to avoid delaying the other commands
        import pyds9

        # Generate a random name to avoid collisions
        names = pyds9.ds9_targets()
        while True:
            name = f'preview-{camera_id}-{random.randint(0, 999999):06d}'
            if names is None or not any(n.startswith('DS9:'+name) for n in names):
                break

        ds9 = pyds9.DS9(name, wait=10)
        port = int(ds9.access().split(':')[-1])

        ds9.set('view filename no')
        ds9.set('view physical no')
        ds9.set('view frame no')
        ds9.set('view buttons no')
        ds9.set('view colorbar no')
        ds9.set('view layout vertical')
        ds9.set('scale mode zscale')
        ds9.set(f"width {config.cameras[camera_id]['preview_ds9_width']}")
        ds9.set(f"height {config.cameras[camera_id]['preview_ds9_height']}")
        ds9.set('background black')
        ds9.set(f"zoom {config.cameras[camera_id]['preview_ds9_zoom']}")
    except Exception:
        traceback.print_exc(file=sys.stdout)
        print('error: failed to open DS9 preview window')
        return -1

    with config.daemon.connect() as pipeline:
        # Note: If the server is running on a different machine a ssh tunnel will be created
        # back to this client machine. This requires that key-based ssh has been configured
        # from the server machine to this client machine.
        return pipeline.register_preview(camera_id, os.getlogin(), port)


def reset(config, _):
    """Reset to the default pipeline configuration"""
    with config.daemon.connect() as pipeline:
        return pipeline.configure({}, quiet=True)


def print_usage():
    """Prints the utility help"""
    print(f'usage: {SCRIPT_NAME} <command> [<args>]')
    print()
    print('general commands:')
    print('   status       print a human-readable summary of the pipeline status')
    print('   preview      open a ds9 window to preview acquired frames')
    print('   reset        reset to the default pipeline configuration')
    print('output frame commands')
    print('   archive      enable or disable frame archiving')
    print('   subdir       set archive subdirectory')
    print('   prefix       set archive frame prefix')
    print('   object       set metadata object name')
    print('   type         set metadata frame type')
    print('reduction flags:')
    print('   wcs          enable or disable WCS solutions')
    print('   rotation     enable or disable field rotation preview')
    print('   hfd          enable or disable half-flux diameter calculations')
    print('   hfdgrid      enable or disable half-flux diameter grid preview')
    print('   intstats     enable or disable intensity statistics')
    print('   dashboard    enable or disable dashboard preview updates')
    print()
    return 0


if __name__ == '__main__':
    commands = {
        'status': print_status,
        'preview': register_preview,
        'reset': reset,
        'archive': set_archive,
        'subdir': set_archive_subdirectory,
        'prefix': set_prefix,
        'object': set_object,
        'type': set_type,
        'wcs': set_wcs,
        'rotation': set_rotation,
        'hfd': set_hfd,
        'hfdgrid': set_hfd_grid,
        'intstats': set_intensity_stats,
        'dashboard': dashboard,
        'list-cameras': list_cameras
    }

    if len(sys.argv) >= 2 and sys.argv[1] in commands:
        sys.exit(run_command(commands[sys.argv[1]], sys.argv[2:]))

    sys.exit(print_usage())
