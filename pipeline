#!/usr/bin/env python3
#
# This file is part of pipelined.
#
# pipelined is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# pipelined is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with pipelined.  If not, see <http://www.gnu.org/licenses/>.

"""Commandline client for managing the reduction pipeline"""

# pylint: disable=invalid-name
# pylint: disable=broad-except

import os
import sys
import Pyro4

PYRO_COMM_TIMEOUT = 5

PIPELINE_HOST = '192.168.0.101'
PIPELINE_PORT = 9012
PIPELINE_NAME = 'pipeline_daemon'

PIPELINE_URI = 'PYRO:' + PIPELINE_NAME + '@' + PIPELINE_HOST + ':' + str(PIPELINE_PORT)
SCRIPT_NAME = os.path.basename(sys.argv[0])
sys.excepthook = Pyro4.util.excepthook

FMT_GREEN = '\033[92m'
FMT_RED = '\033[91m'
FMT_BOLD = '\033[1m'
FMT_CLEAR = '\033[0m'

# This should be kept in sync with the class in camd
STATUS_CODES = {
    # General error codes
    1: 'error: command failed',
    2: 'error: another command is already running',
}

def run_command(command):
    """Prints the message associated with a status code and returns the code"""
    try:
        ret = command()
    except Pyro4.errors.CommunicationError:
        ret = -101

    # Print message associated with error codes, except for -1 (error handled locally)
    if ret in STATUS_CODES:
        print(STATUS_CODES[ret])
    elif ret != -1 and ret != 0:
        print('Returned unknown status code: {0}'.format(ret))
    sys.exit(ret)

def status():
    """Reports the current pipeline status"""
    with Pyro4.Proxy(PIPELINE_URI) as pipeline:
        data = pipeline.report_status()

    if data['guide_camera_id'] is None:
        print('   Guiding ' + FMT_BOLD + FMT_RED + 'DISABLED' + FMT_CLEAR)
    else:
        print('   Guiding on ' + FMT_BOLD + data['guide_camera_id'] + FMT_CLEAR + ' camera')

    reduction_state = FMT_GREEN + 'ENABLED' if data['reduction_enabled'] else FMT_RED + 'DISABLED'
    print('   Reduction ' + FMT_BOLD + reduction_state + FMT_CLEAR)
    wcs_state = FMT_GREEN + 'ENABLED' if data['wcs_enabled'] else FMT_RED + 'DISABLED'
    print('   WCS ' + FMT_BOLD + wcs_state + FMT_CLEAR)
    return 0

def reduction(args):
    """Configure reduction"""
    if len(args) == 1 and (args[0] == 'enable' or args[0] == 'disable'):
        with Pyro4.Proxy(PIPELINE_URI) as pipeline:
            return pipeline.enable_reduction(args[0] == 'enable')
    print('usage: {} reduction (enable|disable)'.format(SCRIPT_NAME))
    return -1

def wcs(args):
    """Configure wcs"""
    if len(args) == 1 and (args[0] == 'enable' or args[0] == 'disable'):
        with Pyro4.Proxy(PIPELINE_URI) as pipeline:
            return pipeline.enable_wcs(args[0] == 'enable')
    print('usage: {} wcs (enable|disable)'.format(SCRIPT_NAME))
    return -1

def print_usage():
    """Prints the utility help"""
    print('usage: {} <command> [<args>]'.format(SCRIPT_NAME))
    print()
    print('general commands:')
    print('   status       print a human-readable summary of the pipeline status')
    print('   reduction    configure online reduction')
    print('   wcs          configure online wcs solutions')
    print()

    return 0

if __name__ == '__main__':
    Pyro4.config.COMMTIMEOUT = PYRO_COMM_TIMEOUT
    if len(sys.argv) == 1:
        sys.exit(print_usage())

    if sys.argv[1] == 'reduction':
        run_command(lambda: reduction(sys.argv[2:]))
    if sys.argv[1] == 'wcs':
        run_command(lambda: wcs(sys.argv[2:]))
    if sys.argv[1] == 'status':
        run_command(status)

    # Command not found
    sys.exit(print_usage())
